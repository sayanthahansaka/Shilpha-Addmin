{"version":3,"sources":["views/shop/ShopModal.js","views/shop/Shop.js"],"names":["ShopModal","_ref","isOpen","toggle","addShop","updateShop","shop","formData","setFormData","useState","shopName","address","phoneNumber","articleNo","colors","sizes","price","date","useEffect","handleChange","event","id","value","target","_jsxs","Modal","children","_jsx","ModalHeader","ModalBody","FormGroup","Label","for","Input","type","onChange","ModalFooter","Button","color","onClick","handleSubmit","shopID","newShop","concat","Math","floor","random","done","Shop","searchTerm","setSearchTerm","shops","setShops","filteredShops","setFilteredShops","isModalOpen","setIsModalOpen","selectedShop","setSelectedShop","initialShops","Card","CardHeader","style","CardTitle","display","gap","alignItems","justifyContent","placeholder","toLowerCase","filteredResults","filter","includes","size","handleOpenAddModal","CardBody","Table","className","bordered","marginTop","fontSize","map","checked","handleShopDoneChange","updatedShops","handleOpenEditModal","handleDeleteShop","handleCloseModal","updatedShop"],"mappings":"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","file":"static/js/16.4d7fbc72.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Label, Input } from \"reactstrap\"\r\n\r\nconst ShopModal = ({ isOpen, toggle, addShop, updateShop, shop }) => {\r\n  const [formData, setFormData] = useState({\r\n    shopName: '',\r\n    address: '',\r\n    phoneNumber: '',\r\n    articleNo: '',\r\n    colors: '',\r\n    sizes: '',\r\n    price: '',\r\n    date: ''\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (shop) {\r\n      setFormData(shop)\r\n    } else {\r\n      setFormData({\r\n        shopName: '',\r\n        address: '',\r\n        phoneNumber: '',\r\n        articleNo: '',\r\n        colors: '',\r\n        sizes: '',\r\n        price: '',\r\n        date: ''\r\n      })\r\n    }\r\n  }, [shop])\r\n\r\n  const handleChange = (event) => {\r\n    const { id, value } = event.target\r\n    setFormData({ ...formData, [id]: value })\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    if (shop) {\r\n      updateShop({ ...formData, shopID: shop.shopID })\r\n    } else {\r\n      const newShop = {\r\n        shopID: `s${Math.floor(Math.random() * 1000)}`, // Generate a unique shop ID\r\n        ...formData,\r\n        done: false // Assuming the shop is initially not done\r\n      }\r\n      addShop(newShop) // Call parent function to add new shop\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} toggle={toggle}>\r\n      <ModalHeader>{shop ? \"Edit Shop\" : \"Add Shop\"}</ModalHeader>\r\n      <ModalBody>\r\n        <FormGroup>\r\n          <Label for=\"shopName\">Shop Name</Label>\r\n          <Input type=\"text\" id=\"shopName\" value={formData.shopName} onChange={handleChange} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"address\">Address</Label>\r\n          <Input type=\"text\" id=\"address\" value={formData.address} onChange={handleChange} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"phoneNumber\">Phone Number</Label>\r\n          <Input type=\"text\" id=\"phoneNumber\" value={formData.phoneNumber} onChange={handleChange} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"articleNo\">Article Number</Label>\r\n          <Input type=\"text\" id=\"articleNo\" value={formData.articleNo} onChange={handleChange} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"colors\">Colors</Label>\r\n          <Input type=\"text\" id=\"colors\" value={formData.colors} onChange={handleChange} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"sizes\">Sizes</Label>\r\n          <Input type=\"text\" id=\"sizes\" value={formData.sizes} onChange={handleChange} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"price\">Price</Label>\r\n          <Input type=\"text\" id=\"price\" value={formData.price} onChange={handleChange} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"date\">Date</Label>\r\n          <Input type=\"date\" id=\"date\" value={formData.date} onChange={handleChange} />\r\n        </FormGroup>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"primary\" onClick={handleSubmit}>\r\n          {shop ? \"Update\" : \"Submit\"}\r\n        </Button>{\" \"}\r\n        <Button color=\"secondary\" onClick={toggle}>\r\n          Cancel\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ShopModal","import React, { useState, useEffect } from 'react'\r\nimport { Card, CardBody, CardHeader, CardTitle, Table, Button, Input } from 'reactstrap'\r\nimport ShopModal from './ShopModal'\r\n\r\nconst Shop = () => {\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const [shops, setShops] = useState([])\r\n  const [filteredShops, setFilteredShops] = useState([])\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [selectedShop, setSelectedShop] = useState(null)\r\n\r\n  // Example fake data\r\n  const initialShops = [\r\n    {\r\n      shopID: 's001',\r\n      shopName: 'Nimal',\r\n      address: \"123 Main St\",\r\n      phoneNumber: \"0752803235\",\r\n      articleNo: \"ABC123,3455\",\r\n      colors: \"Green,red\",\r\n      sizes: \"28\",\r\n      price: \"20500\",\r\n      date: \"2024-08-08\",\r\n      done: false\r\n    },\r\n    {\r\n      shopID: 's002',\r\n      shopName: 'John Shop',\r\n      address: \"456 Elm St\",\r\n      phoneNumber: \"1234567890\",\r\n      articleNo: \"DEF456\",\r\n      colors: \"Blue\",\r\n      sizes: \"32\",\r\n      price: \"3000\",\r\n      date: \"2024-07-14\",\r\n      done: true\r\n    }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    setShops(initialShops)\r\n    setFilteredShops(initialShops)\r\n  }, [])\r\n\r\n  const addShop = (newShop) => {\r\n    setShops([...shops, newShop])\r\n    setFilteredShops([...filteredShops, newShop])\r\n    setIsModalOpen(false)\r\n  }\r\n\r\n  const handleSearch = (event) => {\r\n    const searchTerm = event.target.value.toLowerCase()\r\n    setSearchTerm(searchTerm)\r\n    const filteredResults = shops.filter((shop) => shop.shopName.toLowerCase().includes(searchTerm))\r\n    setFilteredShops(filteredResults)\r\n  }\r\n\r\n  const handleOpenAddModal = () => {\r\n    setSelectedShop(null)\r\n    setIsModalOpen(true)\r\n  }\r\n\r\n  const handleOpenEditModal = (shop) => {\r\n    setSelectedShop(shop)\r\n    setIsModalOpen(true)\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false)\r\n    setSelectedShop(null)\r\n  }\r\n\r\n  const handleUpdateShop = (updatedShop) => {\r\n    const updatedShops = shops.map(shop => (\r\n      shop.shopID === updatedShop.shopID ? updatedShop : shop\r\n    ))\r\n    setShops(updatedShops)\r\n    setFilteredShops(updatedShops)\r\n    setIsModalOpen(false)\r\n  }\r\n\r\n  const handleDeleteShop = (shopID) => {\r\n    const updatedShops = shops.filter(shop => shop.shopID !== shopID)\r\n    setShops(updatedShops)\r\n    setFilteredShops(updatedShops)\r\n  }\r\n\r\n  const handleShopDoneChange = (shopID, event) => {\r\n    const updatedShops = shops.map(shop => (\r\n      shop.shopID === shopID ? { ...shop, done: event.target.checked } : shop\r\n    ))\r\n    setShops(updatedShops)\r\n    setFilteredShops(updatedShops)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <h1 style={{ color: \"black\" }}>Shop Management</h1>\r\n        <CardTitle style={{ display: \"flex\", gap: 25, alignItems: \"center\", justifyContent: \"center\" }}>\r\n          <Input\r\n            type=\"text\"\r\n            placeholder=\"Search by Shop Name\"\r\n            value={searchTerm}\r\n            onChange={handleSearch}\r\n          />\r\n          <Button color=\"success\" size=\"sm\" onClick={handleOpenAddModal}>Add Shop</Button>\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Table className=\"table-responsive\" bordered style={{ marginTop: \"20px\" }}>\r\n          <thead style={{ fontSize: \"13px\" }}>\r\n            <tr>\r\n              <th>Shop ID</th>\r\n              <th>Shop Name</th>\r\n              <th>Address</th>\r\n              <th>Phone Number</th>\r\n              <th>Article No</th>\r\n              <th>Colors</th>\r\n              <th>Sizes</th>\r\n              <th>Price</th>\r\n              <th>Date</th>\r\n              <th>Done</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody style={{ fontSize: \"13px\" }}>\r\n            {filteredShops.map((shop) => (\r\n              <tr key={shop.shopID}>\r\n                <td>{shop.shopID}</td>\r\n                <td>{shop.shopName}</td>\r\n                <td>{shop.address}</td>\r\n                <td>{shop.phoneNumber}</td>\r\n                <td>{shop.articleNo}</td>\r\n                <td>{shop.colors}</td>\r\n                <td>{shop.sizes}</td>\r\n                <td>{shop.price}</td>\r\n                <td>{shop.date}</td>\r\n                <td>\r\n                  <Input\r\n                    type=\"checkbox\"\r\n                    checked={shop.done}\r\n                    onChange={(event) => handleShopDoneChange(shop.shopID, event)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <Button color=\"info\" size=\"sm\" onClick={() => handleOpenEditModal(shop)}>Edit</Button>{' '}\r\n                  <Button color=\"danger\" size=\"sm\" onClick={() => handleDeleteShop(shop.shopID)}>Delete</Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </CardBody>\r\n      <ShopModal isOpen={isModalOpen} toggle={handleCloseModal} addShop={addShop} updateShop={handleUpdateShop} shop={selectedShop} />\r\n    </Card>\r\n  )\r\n}\r\nexport default Shop\r\n"],"sourceRoot":""}