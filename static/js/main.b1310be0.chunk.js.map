{"version":3,"sources":["assets/images/logo/logo.svg","redux/reducers/auth/index.js","redux/reducers/navbar/index.js","redux/reducers/layout/index.js","redux/reducers/rootReducer.js","redux/storeConfig/store.js","utility/context/ThemeColors.js","assets/images/logo/logo.png","@core/components/spinner/Fallback-spinner.js","@core/components/ripple-button/index.js","serviceWorker.js","index.js","configs/themeConfig.js"],"names":["initialState","userData","authReducer","state","arguments","length","undefined","action","type","data","config","storageTokenKeyName","storageRefreshTokenKeyName","obj","suggestions","bookmarks","query","navbarReducer","val","objectToUpdate","find","item","id","isBookmarked","bookmarkIndex","findIndex","x","push","splice","isRTL","themeConfig","layout","menuCollapsed","initialMenuCollapsed","window","localStorage","getItem","JSON","parse","menu","isCollapsed","menuHidden","isHidden","contentWidth","layoutReducer","value","setItem","rootReducer","combineReducers","auth","navbar","middleware","thunk","createDebounce","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ThemeColors","createContext","ThemeContext","_ref","children","colors","setColors","useState","useEffect","getHex","color","getComputedStyle","document","body","getPropertyValue","trim","primary","light","concat","main","secondary","success","danger","warning","info","dark","_jsx","Provider","SpinnerComponent","_jsxs","className","src","logo","alt","Button","Ripple","onClick","rest","mounted","setMounted","isRippling","setIsRippling","coords","setCoords","y","setTimeout","classnames","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","style","Boolean","location","hostname","match","LazyApp","lazy","ReactDOM","render","Suspense","fallback","Spinner","ToastContainer","newestOnTop","getElementById","navigator","serviceWorker","ready","then","registration","unregister","app","appName","appLogoImage","require","default","skin","routerTransition","backgroundColor","footer","customizer","scrollTop"],"mappings":"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","file":"static/js/main.b1310be0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b37039e4.svg\";","// **  Initial State\nconst initialState = {\n  userData: {}\n}\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      return {\n        ...state,\n        userData: action.data,\n        [action.config.storageTokenKeyName]: action[action.config.storageTokenKeyName],\n        [action.config.storageRefreshTokenKeyName]: action[action.config.storageRefreshTokenKeyName]\n      }\n    case 'LOGOUT':\n      const obj = { ...action }\n      delete obj.type\n      return { ...state, userData: {}, ...obj }\n    default:\n      return state\n  }\n}\n\nexport default authReducer\n","// ** Initial State\r\nconst initialState = {\r\n  suggestions: [],\r\n  bookmarks: [],\r\n  query: ''\r\n}\r\n\r\nconst navbarReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'HANDLE_SEARCH_QUERY':\r\n      return { ...state, query: action.val }\r\n    case 'GET_BOOKMARKS':\r\n      return { ...state, suggestions: action.data, bookmarks: action.bookmarks }\r\n    case 'UPDATE_BOOKMARKED':\r\n      let objectToUpdate\r\n\r\n      // ** find & update object\r\n      state.suggestions.find(item => {\r\n        if (item.id === action.id) {\r\n          item.isBookmarked = !item.isBookmarked\r\n          objectToUpdate = item\r\n        }\r\n      })\r\n\r\n      // ** Get index to add or remove bookmark from array\r\n      const bookmarkIndex = state.bookmarks.findIndex(x => x.id === action.id)\r\n\r\n      if (bookmarkIndex === -1) {\r\n        state.bookmarks.push(objectToUpdate)\r\n      } else {\r\n        state.bookmarks.splice(bookmarkIndex, 1)\r\n      }\r\n\r\n      return { ...state }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default navbarReducer\r\n","// ** ThemeConfig Import\r\nimport themeConfig from '@configs/themeConfig'\r\n\r\n// ** Returns Initial Menu Collapsed State\r\nconst initialMenuCollapsed = () => {\r\n  const item = window.localStorage.getItem('menuCollapsed')\r\n  //** Parse stored json or if none return initialValue\r\n  return item ? JSON.parse(item) : themeConfig.layout.menu.isCollapsed\r\n}\r\n\r\n// ** Initial State\r\nconst initialState = {\r\n  isRTL: themeConfig.layout.isRTL,\r\n  menuCollapsed: initialMenuCollapsed(),\r\n  menuHidden: themeConfig.layout.menu.isHidden,\r\n  contentWidth: themeConfig.layout.contentWidth\r\n}\r\n\r\nconst layoutReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'HANDLE_CONTENT_WIDTH':\r\n      return { ...state, contentWidth: action.value }\r\n    case 'HANDLE_MENU_COLLAPSED':\r\n      window.localStorage.setItem('menuCollapsed', action.value)\r\n      return { ...state, menuCollapsed: action.value }\r\n    case 'HANDLE_MENU_HIDDEN':\r\n      return { ...state, menuHidden: action.value }\r\n    case 'HANDLE_RTL':\r\n      return { ...state, isRTL: action.value }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default layoutReducer\r\n","// ** Redux Imports\r\nimport { combineReducers } from 'redux'\r\n\r\n// ** Reducers Imports\r\nimport auth from './auth'\r\nimport navbar from './navbar'\r\nimport layout from './layout'\r\n\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  navbar,\r\n  layout\r\n})\r\n\r\nexport default rootReducer\r\n","// ** Redux, Thunk & Root Reducer Imports\r\nimport thunk from 'redux-thunk'\r\nimport createDebounce from 'redux-debounced'\r\nimport rootReducer from '../reducers/rootReducer'\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\n\r\n// ** init middleware\r\nconst middleware = [thunk, createDebounce()]\r\n\r\n// ** Dev Tools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\n// ** Create store\r\nconst store = createStore(rootReducer, {}, composeEnhancers(applyMiddleware(...middleware)))\r\n\r\nexport { store }\r\n","// ** React Imports\r\nimport { useEffect, useState, createContext } from 'react'\r\n\r\n// ** Create Context\r\nconst ThemeColors = createContext()\r\n\r\nconst ThemeContext = ({ children }) => {\r\n  // ** State\r\n  const [colors, setColors] = useState({})\r\n\r\n  //** ComponentDidMount\r\n  useEffect(() => {\r\n    if (window !== 'undefined') {\r\n      //** Get variable value\r\n      const getHex = color => window.getComputedStyle(document.body).getPropertyValue(color).trim()\r\n\r\n      //** Colors obj\r\n      const obj = {\r\n        primary: {\r\n          light: getHex('--primary').concat('1a'),\r\n          main: getHex('--primary')\r\n        },\r\n        secondary: {\r\n          light: getHex('--secondary').concat('1a'),\r\n          main: getHex('--secondary')\r\n        },\r\n        success: {\r\n          light: getHex('--success').concat('1a'),\r\n          main: getHex('--success')\r\n        },\r\n        danger: {\r\n          light: getHex('--danger').concat('1a'),\r\n          main: getHex('--danger')\r\n        },\r\n        warning: {\r\n          light: getHex('--warning').concat('1a'),\r\n          main: getHex('--warning')\r\n        },\r\n        info: {\r\n          light: getHex('--info').concat('1a'),\r\n          main: getHex('--info')\r\n        },\r\n        dark: {\r\n          light: getHex('--dark').concat('1a'),\r\n          main: getHex('--dark')\r\n        }\r\n      }\r\n\r\n      setColors({ ...obj })\r\n    }\r\n  }, [])\r\n\r\n  return <ThemeColors.Provider value={{ colors }}>{children}</ThemeColors.Provider>\r\n}\r\n\r\nexport { ThemeColors, ThemeContext }\r\n","export default __webpack_public_path__ + \"static/media/logo.08b84de3.png\";","// ** Logo\nimport logo from '@src/assets/images/logo/logo.png'\n\nconst SpinnerComponent = () => {\n  return (\n    <div className='fallback-spinner vh-100'>\n      <img className='fallback-logo' src={logo} alt='logo' />\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default SpinnerComponent\n","// ** React Imports\nimport { useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport { Button } from 'reactstrap'\nimport classnames from 'classnames'\n\n// ** Styles\nimport './ripple-button.scss'\n\nconst RippleButton = ({ className, children, onClick, ...rest }) => {\n  // ** States\n  const [mounted, setMounted] = useState(false)\n  const [isRippling, setIsRippling] = useState(false)\n  const [coords, setCoords] = useState({ x: -1, y: -1 })\n\n  // ** Toggle mounted on mount & unmount\n  useEffect(() => {\n    setMounted(true)\n    return () => setMounted(false)\n  }, [])\n\n  // ** Check for coords and set ripple\n  useEffect(() => {\n    if (mounted) {\n      if (coords.x !== -1 && coords.y !== -1) {\n        setIsRippling(true)\n        setTimeout(() => setIsRippling(false), 500)\n      } else {\n        setIsRippling(false)\n      }\n    }\n  }, [coords])\n\n  // ** Reset Coords on ripple end\n  useEffect(() => {\n    if (mounted) {\n      if (!isRippling) setCoords({ x: -1, y: -1 })\n    }\n  }, [isRippling])\n\n  return (\n    <Button\n      className={classnames('waves-effect', {\n        [className]: className\n      })}\n      onClick={e => {\n        const rect = e.target.getBoundingClientRect()\n        setCoords({ x: e.clientX - rect.left, y: e.clientY - rect.top })\n        if (onClick) {\n          onClick(e)\n        }\n      }}\n      {...rest}\n    >\n      {children}\n      {isRippling ? (\n        <span\n          className='waves-ripple'\n          style={{\n            left: coords.x,\n            top: coords.y\n          }}\n        ></span>\n      ) : null}\n    </Button>\n  )\n}\n\n// ** PropTypes\nRippleButton.propTypes = {\n  ...Button.propTypes\n}\n\nButton.Ripple = RippleButton\n","/*eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker === null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (response.status === 404 || (contentType !== null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","// ** React Imports\nimport { Suspense, lazy } from 'react'\nimport ReactDOM from 'react-dom'\n\n// ** Redux Imports\nimport { Provider } from 'react-redux'\nimport { store } from './redux/storeConfig/store'\n\n// ** Toast & ThemeColors Context\nimport { ToastContainer } from 'react-toastify'\nimport { ThemeContext } from './utility/context/ThemeColors'\n\n// ** Spinner (Splash Screen)\nimport Spinner from './@core/components/spinner/Fallback-spinner'\n\n// ** Ripple Button\nimport './@core/components/ripple-button'\n\n// ** PrismJS\nimport 'prismjs'\nimport 'prismjs/themes/prism-tomorrow.css'\nimport 'prismjs/components/prism-jsx.min'\n\n// ** React Perfect Scrollbar\nimport 'react-perfect-scrollbar/dist/css/styles.css'\n\n// ** React Toastify\nimport '@styles/react/libs/toastify/toastify.scss'\n\n// ** Core styles\nimport './@core/assets/fonts/feather/iconfont.css'\nimport './@core/scss/core.scss'\nimport './assets/scss/style.scss'\n\n// ** Service Worker\nimport * as serviceWorker from './serviceWorker'\n\n// ** Lazy load app\nconst LazyApp = lazy(() => import('./App'))\n\nReactDOM.render(\n  <Provider store={store}>\n    <Suspense fallback={<Spinner />}>\n      <ThemeContext>\n        <LazyApp />\n        <ToastContainer newestOnTop />\n      </ThemeContext>\n    </Suspense>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// You can customize the template with the help of this file\r\n\r\n//Template config options\r\nconst themeConfig = {\r\n  app: {\r\n    appName: 'Shilpha-Admin',\r\n    appLogoImage: require('@src/assets/images/logo/logo.svg').default\r\n  },\r\n  layout: {\r\n    isRTL: false,\r\n    skin: 'light', // light, dark, bordered, semi-dark\r\n    routerTransition: 'fadeIn', // fadeIn, fadeInLeft, zoomIn, none or check this for more transition https://animate.style/\r\n    type: 'vertical', // vertical, horizontal\r\n    contentWidth: 'full', // full, boxed\r\n    menu: {\r\n      isHidden: false,\r\n      isCollapsed: false\r\n    },\r\n    navbar: {\r\n      // ? For horizontal menu, navbar type will work for navMenu type\r\n      type: 'floating', // static , sticky , floating, hidden\r\n      backgroundColor: 'white' // BS color options [primary, success, etc]\r\n    },\r\n    footer: {\r\n      type: 'static' // static, sticky, hidden\r\n    },\r\n    customizer: false,\r\n    scrollTop: true // Enable scroll to top button\r\n  }\r\n}\r\n\r\nexport default themeConfig\r\n"],"sourceRoot":""}