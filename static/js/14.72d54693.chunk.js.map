{"version":3,"sources":["views/online/OrderModal.js","views/online/Online.js"],"names":["OrderModal","_ref","isOpen","toggle","addOrder","formData","setFormData","useState","customerName","address","phoneNumber","articleNo","color","size","price","date","handleChange","event","id","value","target","_jsxs","Modal","children","_jsx","ModalHeader","ModalBody","FormGroup","Label","for","Input","type","onChange","ModalFooter","Button","onClick","handleSubmit","newOrder","orderID","concat","Math","floor","random","done","Online","searchTerm","setSearchTerm","onlineOrders","setOnlineOrders","filteredOrders","setFilteredOrders","isAddModalOpen","setIsAddModalOpen","isEditModalOpen","setIsEditModalOpen","selectedOrder","setSelectedOrder","initialOnlineOrders","Card","CardHeader","style","CardTitle","display","gap","alignItems","justifyContent","placeholder","toLowerCase","filteredResults","filter","order","includes","disabled","handleOpenAddModal","CardBody","Table","className","bordered","marginTop","fontSize","map","name","checked","handleOrderDoneChange","handleOpenEditModal","updatedOrders","handleDeleteOrder","handleCloseModal","updateOrder","updatedOrder"],"mappings":"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","file":"static/js/14.72d54693.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Label, Input } from \"reactstrap\"\n\nconst OrderModal = ({ isOpen, toggle, addOrder }) => {\n  const [formData, setFormData] = useState({\n    customerName: '',\n    address: '',\n    phoneNumber: '',\n    articleNo: '',\n    color: '',\n    size: '',\n    price: '',\n    date: ''\n  })\n\n  const handleChange = (event) => {\n    const { id, value } = event.target\n    setFormData({ ...formData, [id]: value })\n  }\n\n  const handleSubmit = () => {\n    const newOrder = {\n      orderID: `o${Math.floor(Math.random() * 1000)}`, // Generate a unique order ID\n      ...formData,\n      done: false // Assuming the order is initially not done\n    }\n    addOrder(newOrder) // Call parent function to add new order\n  }\n\n  return (\n    <Modal isOpen={isOpen} toggle={toggle}>\n      <ModalHeader>Add Request</ModalHeader>\n      <ModalBody>\n        <FormGroup>\n          <Label for=\"customerName\">Customer Name</Label>\n          <Input type=\"text\" id=\"customerName\" value={formData.customerName} onChange={handleChange} />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"address\">Address</Label>\n          <Input type=\"text\" id=\"address\" value={formData.address} onChange={handleChange} />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"phoneNumber\">Phone Number</Label>\n          <Input type=\"text\" id=\"phoneNumber\" value={formData.phoneNumber} onChange={handleChange} />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"articleNo\">Article Number</Label>\n          <Input type=\"text\" id=\"articleNo\" value={formData.articleNo} onChange={handleChange} />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"color\">Color</Label>\n          <Input type=\"text\" id=\"color\" value={formData.color} onChange={handleChange} />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"size\">Size</Label>\n          <Input type=\"text\" id=\"size\" value={formData.size} onChange={handleChange} />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"price\">Price</Label>\n          <Input type=\"text\" id=\"price\" value={formData.price} onChange={handleChange} />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"date\">Date</Label>\n          <Input type=\"date\" id=\"date\" value={formData.date} onChange={handleChange} />\n        </FormGroup>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={handleSubmit}>\n          Submit\n        </Button>{\" \"}\n        <Button color=\"secondary\" onClick={toggle}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default OrderModal\n","import React, { useState } from 'react'\r\nimport { Card, CardBody, CardHeader, CardTitle, Table, Button, Input, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\nimport OrderModal from './OrderModal'\r\n\r\nconst Online = () => {\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const [onlineOrders, setOnlineOrders] = useState([])\r\n  const [filteredOrders, setFilteredOrders] = useState([])\r\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false)\r\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false)\r\n  const [selectedOrder, setSelectedOrder] = useState(null)\r\n\r\n  // Example fake data (use an array of objects for multiple orders)\r\n  const initialOnlineOrders = [\r\n    {\r\n      orderID: 'o001',\r\n      customerName: 'Nimal',\r\n      address: \"123 Main St\",\r\n      phoneNumber: \"0752803235\",\r\n      articleNo: \"ABC123\",\r\n      color: \"Green\",\r\n      size: \"28\",\r\n      price: \"2500\",\r\n      date: \"2024-08-08\",\r\n      done: false\r\n    },\r\n    {\r\n      orderID: 'o002',\r\n      customerName: 'John Doe',\r\n      address: \"456 Elm St\",\r\n      phoneNumber: \"1234567890\",\r\n      articleNo: \"DEF456\",\r\n      color: \"Blue\",\r\n      size: \"32\",\r\n      price: \"3000\",\r\n      date: \"2024-07-14\",\r\n      done: true\r\n    }\r\n  ]\r\n\r\n  useState(() => {\r\n    setOnlineOrders(initialOnlineOrders)\r\n    setFilteredOrders(initialOnlineOrders)\r\n  }, [])\r\n\r\n  const addOrder = (newOrder) => {\r\n    setOnlineOrders([...onlineOrders, newOrder])\r\n    setFilteredOrders([...filteredOrders, newOrder])\r\n    setIsAddModalOpen(false) // Close modal after adding order\r\n  }\r\n\r\n  const handleSearch = (event) => {\r\n    const searchTerm = event.target.value.toLowerCase()\r\n    setSearchTerm(searchTerm)\r\n    const filteredResults = onlineOrders.filter((order) => order.customerName.toLowerCase().includes(searchTerm))\r\n    setFilteredOrders(filteredResults)\r\n  }\r\n\r\n  const handleOpenAddModal = () => {\r\n    setIsAddModalOpen(true)\r\n  }\r\n\r\n  const handleOpenEditModal = (order) => {\r\n    setSelectedOrder(order)\r\n    setIsEditModalOpen(true)\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n    setIsAddModalOpen(false)\r\n    setIsEditModalOpen(false)\r\n    setSelectedOrder(null)\r\n  }\r\n\r\n  const handleUpdateOrder = (updatedOrder) => {\r\n    const updatedOrders = onlineOrders.map(order => (\r\n      order.orderID === updatedOrder.orderID ? updatedOrder : order\r\n    ))\r\n    setOnlineOrders(updatedOrders)\r\n    setFilteredOrders(updatedOrders)\r\n    setIsEditModalOpen(false)\r\n  }\r\n  \r\n\r\n  const handleDeleteOrder = (orderID) => {\r\n    const updatedOrders = onlineOrders.filter(order => order.orderID !== orderID)\r\n    setOnlineOrders(updatedOrders)\r\n    setFilteredOrders(updatedOrders)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <h1 style={{ color: \"black\" }}>Online Orders Manage</h1>\r\n        <CardTitle style={{ display: \"flex\", gap: 25, alignItems: \"center\", justifyContent: \"center\" }}>\r\n          <Input\r\n            type=\"text\"\r\n            placeholder=\"Search by Customer Name\"\r\n            value={searchTerm}\r\n            onChange={handleSearch}\r\n          />\r\n          <Button color=\"success\" size=\"sm\" disabled={isAddModalOpen} onClick={handleOpenAddModal}>Add Order</Button>\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Table className=\"table-responsive\" bordered style={{ marginTop: \"20px\" }}>\r\n          <thead style={{ fontSize: \"13px\" }}>\r\n            <tr>\r\n              <th>Order ID</th>\r\n              <th>Customer Name</th>\r\n              <th>Address</th>\r\n              <th>Phone Number</th>\r\n              <th>Article No</th>\r\n              <th>Color</th>\r\n              <th>Size</th>\r\n              <th>Price</th>\r\n              <th>Date</th>\r\n              <th>Order Done</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody style={{ fontSize: \"13px\" }}>\r\n            {filteredOrders.map((order) => (\r\n              <tr key={order.orderID}>\r\n                <td>{order.orderID}</td>\r\n                <td>{order.customerName}</td>\r\n                <td>{order.address}</td>\r\n                <td>{order.phoneNumber}</td>\r\n                <td>{order.articleNo}</td>\r\n                <td>{order.color}</td>\r\n                <td>{order.size}</td>\r\n                <td>{order.price}</td>\r\n                <td>{order.date}</td>\r\n                <td>\r\n                  <Input\r\n                    type=\"radio\"\r\n                    name={`orderDone_${order.orderID}`}\r\n                    checked={order.done}\r\n                    onChange={(event) => handleOrderDoneChange(order.orderID, event)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <Button color=\"info\" size=\"sm\" onClick={() => handleOpenEditModal(order)}>Edit</Button>{' '}\r\n                  <Button color=\"danger\" size=\"sm\" onClick={() => handleDeleteOrder(order.orderID)}>Delete</Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </CardBody>\r\n      <OrderModal isOpen={isAddModalOpen || isEditModalOpen} toggle={handleCloseModal} addOrder={addOrder} updateOrder={handleUpdateOrder} order={selectedOrder} />\r\n    </Card>\r\n  )\r\n}\r\nexport default Online\r\n"],"sourceRoot":""}